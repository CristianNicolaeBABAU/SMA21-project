// Generated by view binder compiler. Do not edit!
package com.example.licenta.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.licenta.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MealItemHolderBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button mealItemAddBtn;

  @NonNull
  public final RecyclerView mealItemFoodRv;

  @NonNull
  public final TextView mealItemMealNoTv;

  @NonNull
  public final Button mealItemRemoveBtn;

  private MealItemHolderBinding(@NonNull LinearLayout rootView, @NonNull Button mealItemAddBtn,
      @NonNull RecyclerView mealItemFoodRv, @NonNull TextView mealItemMealNoTv,
      @NonNull Button mealItemRemoveBtn) {
    this.rootView = rootView;
    this.mealItemAddBtn = mealItemAddBtn;
    this.mealItemFoodRv = mealItemFoodRv;
    this.mealItemMealNoTv = mealItemMealNoTv;
    this.mealItemRemoveBtn = mealItemRemoveBtn;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MealItemHolderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MealItemHolderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.meal_item_holder, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MealItemHolderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.meal_item_add_btn;
      Button mealItemAddBtn = ViewBindings.findChildViewById(rootView, id);
      if (mealItemAddBtn == null) {
        break missingId;
      }

      id = R.id.meal_item_food_rv;
      RecyclerView mealItemFoodRv = ViewBindings.findChildViewById(rootView, id);
      if (mealItemFoodRv == null) {
        break missingId;
      }

      id = R.id.meal_item_meal_no_tv;
      TextView mealItemMealNoTv = ViewBindings.findChildViewById(rootView, id);
      if (mealItemMealNoTv == null) {
        break missingId;
      }

      id = R.id.meal_item_remove_btn;
      Button mealItemRemoveBtn = ViewBindings.findChildViewById(rootView, id);
      if (mealItemRemoveBtn == null) {
        break missingId;
      }

      return new MealItemHolderBinding((LinearLayout) rootView, mealItemAddBtn, mealItemFoodRv,
          mealItemMealNoTv, mealItemRemoveBtn);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
